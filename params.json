{"name":"Taskmapper","body":"# taskmapper\r\n\r\ntaskmapper is a Gem which eases communication with various bug tracking and project management systems by providing a consistent Ruby API.\r\n\r\ntaskmapper let's you \"remap\" a system into the consistent taskmapper API, easily. For instance the description of an issue/ticket, might be named **description** in one system, and **problem-description** somewhere else. Via taskmapper, this would always be called **description**. The taskmapper remaps makes it easy for you to integrate different kinds of ticket/task systems, into your own system. You don't have to take care of all the different kinds of systems, and their different APIs. taskmapper handles all this *for* you, so you can focus on making your application awesome.\r\n\r\n## Installation\r\n\r\ntaskmapper is a Gem, so we can easily install it by using RubyGems:\r\n\r\n    gem install taskmapper\r\n\r\ntaskmapper depends on [Hashie](http://github.com/intridea/hashie), which is an amazing library which makes converting objects to hashes, and the other way around, a joy. It should be installed automatically whenever installing taskmapper.\r\n\r\n### Finding and installing a provider\r\n\r\ntaskmapper by itself won't do too much. You may want to install a provider, to retrieve a list of available providers issue the following command:\r\n\r\n    gem search taskmapper\r\n\r\nYou could then install for instance taskmapper-pivotal:\r\n\r\n    gem install taskmapper-pivotal\r\n\r\n## Usage\r\n\r\n**Note:** The API may change, and the following may not be the final. Please keep yourself updated before you upgrade.\r\n\r\nFirst, we instance a new class with the right set of options. In this example, we are authenticating with Pivotal Tracker.\r\n\r\n    pivotal = taskmapper.new(:pivotal, {:username => \"john\", :password => \"seekrit\"})\r\n\r\n### Grabbing a project\r\n\r\nNow that we've got out taskmapper instance, let's go ahead and grab \"testproject\":\r\n\r\n    project = pivotal.project[\"testproject\"]\r\n        #=> taskmapper::Project<#name=\"testproject\"..>\r\n\r\n*Project#[]* is an alias to *Project#find*:\r\n\r\n    project = pivotal.project.find \"testproject\"\r\n        #=> taskmapper::Project<#name=\"testproject\"..>\r\n\r\nWhich translates into:\r\n\r\n    project = pivotal.project.find :name => \"testproject\"\r\n        #=> taskmapper::Project<#name=\"testproject\"..>\r\n\r\nThat means you can actually look up a project by something else than the title, like the owner:\r\n\r\n    project = pivotal.project.find :owner => \"Sirupsen\"\r\n        #=> taskmapper::Project<#owner=\"sirupsen\"..>\r\n\r\nTo retrieve all projects, simply pass no argument to find:\r\n\r\n    project = pivotal.project.find\r\n        #=> [taskmapper::Project<#..>,TaskMapper::Project<#..>,..]\r\n\r\n### Creating a ticket\r\n\r\nNow that we grabbed the right project. Let's go ahead and create a ticket at this project:\r\n\r\n    project.ticket!(:title => \"Test\", :description => \"Hello World\")\r\n\r\nWe create our ticket with three properties.\r\n\r\n### Finding tickets\r\n\r\nAlright, let's play with the projects tickets! Here we grab the ticket with the id of 22:\r\n\r\n    ticket = project.tickets(:id => 22)\r\n        #=> taskmapper::Ticket<#id=22..>\r\n\r\nLike with projects, we can also find tickets by other attributes, like title, priority and so on, with tickets we do not use a find method though. Also as with projects, if no argument is passed, all tickets are retrieved:\r\n\r\n    tickets = project.tickets\r\n        #=> [taskmapper::Ticket<#..>,TaskMapper::Ticket<#..>,..]\r\n\r\n### Changing ticket attributes\r\n\r\nLet's say that we're working on this ticket right now, so let's go ahead and change the status to reflect that:\r\n\r\n    ticket.status = :in_progress\r\n\r\nOther valid ticket statuses include:\r\n\r\n    :closed, :accepted, :resolved\r\n\r\nFor the sake of example, we'll change the description as well, and then save the ticket.\r\n\r\n    ticket.description = \"Changed description to something else!\"\r\n    ticket.save\r\n\r\n### Closing a ticket\r\n\r\nThe issue was solved, let's make that official by closing the ticket with the appropriate resolution:\r\n\r\n    ticket.close(:resolution => \"fixed\", :description => \"Fixed issue by doing x\")\r\n\r\nNote that you could close the ticket by changing all the attributes manually, like so:\r\n\r\n    ticket.status = :closed\r\n    ticket.resolution = \"fixed\"\r\n    ticket.resolution_description = \"Fixed issue by doing x\"\r\n    ticket.save\r\n\r\nHowever, as closing a ticket with a resolution is such a common task, the other method is included because it may be more convenient.\r\n\r\n## Support\r\n\r\nCurrently taskmapper supports the following systems:\r\n\r\n### Pivotal Tracker\r\n\r\nTo use Pivotal Tracker with taskmapper, install it:\r\n    gem install taskmapper-pivotal\r\n\r\nThen simply require it, and you are good to use Pivotal Tracker with taskmapper!\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-pivotal'\r\n    unfuddle = taskmapper.new(:pivotal, {:username => \"..\", :password => \"..\"})\r\n\r\nThe source code is located at [taskmapper-pivotal](http://github.com/hybridgroup/taskmapper-pivotal)\r\n\r\n### Lighthouse\r\n\r\nTo use Lighthouse with taskmapper, install it:\r\n    gem install taskmapper-lighthouse\r\n\r\nThen simply require it, and you are all set to use Lighthouse with taskmapper!\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-lighthouse'\r\n    lighthouse = taskmapper.new(:lighthouse, {:username => \"..\", :password => \"..\"})\r\n\r\nThe source code is located at [taskmapper-lighthouse](http://github.com/hybridgroup/taskmapper-lighthouse)\r\n\r\n### Basecamp\r\n\r\nTo use Basecamp with taskmapper, install it:\r\n    gem install taskmapper-basecamp\r\n\r\nOnce you require it, then you are ready to use Basecamp with taskmapper\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-basecamp'\r\n    basecamp = taskmapper.new(:basecamp, :domain => 'yourdomain.basecamphq.com', :username => 'you', :password => 'pass')\r\n\r\nThe source code is located at [taskmapper-basecamp](http://github.com/hybridgroup/taskmapper-basecamp)\r\n\r\n### Github\r\n\r\nTo use Github's issue tracking with taskmapper, install it:\r\n    gem install taskmapper-github\r\n\r\nOnce you require it, then you are ready to use Github and taskmapper\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-github'\r\n    github = taskmapper.new(:github, :username => 'you', :password => 'pass')\r\n\r\nThe source code is located at [taskmapper-github](http://github.com/hybridgroup/taskmapper-github)\r\n\r\n### Unfuddle\r\n\r\nTo use Unfuddle with taskmapper, install it:\r\n    gem install taskmapper-unfuddle\r\n\r\nThen simply require it, and you are good to use Unfuddle with taskmapper!\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-unfuddle'\r\n    unfuddle = taskmapper.new(:unfuddle, {:username => \"..\", :password => \"..\", :account => \"..\"})\r\n\r\nThe source code is located at [taskmapper-unfuddle](http://github.com/hybridgroup/taskmapper-unfuddle)\r\n\r\n### Kanban Pad\r\n\r\nTo use Kanban Pad with taskmapper, install it:\r\n    gem install taskmapper-kanbanpad\r\n\r\nOnce you require it, you can connect to Kanban Pad using taskmapper!\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-kanbanpad'\r\n    kanbanpad = taskmapper.new(:kanbanpad, {:username => \"xx\", :password => \"xx\"})\r\n\r\nThe source code is located at [taskmapper-kanbanpad](https://github.com/hybridgroup/taskmapper-kanbanpad)\r\n\r\n### Redmine\r\n\r\nTo use Redmine with taskmapper, install it:\r\n    gem install taskmapper-redmine\r\n\r\nJust require it, and you are ready to use Redmine with taskmapper!\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-redmine'\r\n    redmine = taskmapper.new(:redmine, {:username => \"..\", :password => \"..\", :server => \"..\"})\r\n\r\nThe source code is located at [taskmapper-redmine](http://github.com/hybridgroup/taskmapper-redmine)\r\n\r\n### Trac\r\n\r\nTo use Trac with taskmapper, install it:\r\n    gem install taskmapper-trac\r\n\r\nRequire it, and you are happening to call Trac with taskmapper!\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-trac'\r\n    trac = taskmapper.new(:trac, {:username => \"..\", :password => \"..\", :url => \"..\"})\r\n\r\nThe source code is located at [taskmapper-trac](http://github.com/hybridgroup/taskmapper-trac)\r\n\r\n### Codaset\r\n\r\nTo use Codaset with taskmapper, install it:\r\n    gem install taskmapper-codaset\r\n\r\nRequire and you have connected to Codaset with taskmapper!\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-codaset'\r\n    codaset = taskmapper.new(:codaset, {:username => \"foo\", :password => \"bar\", :client_id => \"your_client_id\", :client_secret => \"your_client_secret\"})\r\n\r\nThe source code is located at [taskmapper-codaset](http://github.com/hybridgroup/taskmapper-codaset)\r\n\r\n### Bugzilla\r\n\r\nTo use Bugzilla with taskmapper, install it:\r\n    gem install taskmapper-bugzilla\r\n\r\nRequire and you can talk to Bugzilla with taskmapper!\r\n\r\n    require 'taskmapper'\r\n    require 'taskmapper-bugzilla'\r\n    codaset = taskmapper.new(:bugzilla, {:username => \"foo\", :password => \"bar\", :url => \"https://bugzilla.mozilla.org\"})\r\n\r\nThe source code is located at [taskmapper-bugzilla](http://github.com/hybridgroup/taskmapper-bugzilla)\r\n\r\n## Creating a provider\r\nCreating a provider consists of three steps:\r\n\r\n* Run the generator like this:\r\n    tm generate myprovider\r\n* Implement whatever is needed to connect to your desired backend\r\n* Release it to RubyGems\r\n\r\n### Create the taskmapper provider\r\nThanks to a simple generator, it is easy to get started with a new provider. Run this from the command line:\r\n    tm generate myprovider\r\n\r\nThis will generate a new skeleton provider called taskmapper-myprovider in the current directory. Create a repo from that directory, and you can start implementing your provider.\r\n\r\nAlmost all APIs are different. And so are their Ruby providers. taskmapper attempts to create an universal API for ticket and project management systems, and thus, we need to map the functionality to the taskmapper API. This is the providers job. The provider is the glue between taskmapper, and the ticket management system's API.\r\nUsually, your provider would rely on another library for the raw HTTP interaction. For instance, [taskmapper-lighthouse](http://github.com/hybridgroup/taskmapper-lighthouse) relies on ActiveResource in order to interact with the Lighthouse API. Look at it like this:\r\n\r\n**taskmapper** -> **Provider** -> *(Ruby library)* -> **Site's API**\r\n\r\nProvider being the *glue* between the site's API and taskmapper. The Ruby library is \"optional\" (though highly recommended as mentioned), therefore it is in parantheses.\r\n\r\nAn example of a provider could be [taskmapper-lighthouse](http://github.com/hybridgroup/taskmapper-lighthouse), an example of a Ruby library could be ActiveResource.\r\n\r\nFor now, look at [taskmapper-lighthouse](http://github.com/hybridgroup/taskmapper-lighthouse) as an example on how to create a provider. More detailed documentation will be available soon.\r\n\r\n### Release it\r\nSimply release it to RubyGems.org, the name of the provider Gem should follow this simple naming rule:\r\n\r\n    taskmapper-<provider's name>\r\n\r\nFor instance if you set for a Github provider, it would be named:\r\n\r\n    taskmapper-github\r\n\r\nThis makes it easy for people to find providers, simply by issuing:\r\n\r\n    gem search -r taskmapper\r\n\r\nThey should be presented with a nice list of all available providers.\r\n\r\n## Note on Patches/Pull Requests\r\n\r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Add tests for it. This is important so we don't break it in a\r\n  future version unintentionally.\r\n* Commit, do not mess with rakefile, version, or history.\r\n  (if you want to have your own version, that is fine but bump version in a commit by itself so we can ignore when we pull)\r\n* Send us a pull request. Bonus points for feature branches.\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2010-2012 [The Hybrid Group](http://hybridgroup.com). See LICENSE for details.\r\n","tagline":"Taskmapper provides a universal API to trouble ticket and project management systems using Ruby","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}